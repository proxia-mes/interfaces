name: extern-erp-v1

on:
  push:
    paths:
      - 'extern/erp/v1/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  READ_PROXIA_GITHUB_PACKAGES_SECRET: ${{ secrets.READ_PROXIA_GITHUB_PACKAGES_SECRET }}
  READ_PROXIA_GITHUB_PACKAGES_USER: flobuc
  GEN_OUT_DIR: gen
  GITHUB_NUGET_REPOSITORY: https://nuget.pkg.github.com/proxia-mes/index.json
  INTERFACE_FILE: extern/erp/v1/erp-mes-interface-v1.yaml
  PACKAGE_NAME: PAG.Mes.Extern.ERP.Client
  PROJECT_DIR: gen/src/PAG.Mes.Extern.ERP.Client

jobs:
  generate-csharp-client:
    runs-on: ubuntu-20.04
      
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create gen dir
        run: mkdir -p $GEN_OUT_DIR
        
      - name: Get interface version from yaml and set to env
        run: echo INTERFACE_VERSION=`yq eval .info.version $INTERFACE_FILE` >> $GITHUB_ENV

      - name: Generate C# client code
        uses: docker://openapitools/openapi-generator-cli
        with:
          args: generate -o /github/workspace/${{env.GEN_OUT_DIR}} -i /github/workspace/${{env.INTERFACE_FILE}} -g csharp-netcore --additional-properties targetFramework=net5.0,packageName=${{env.PACKAGE_NAME}},packageVersion=${{env.INTERFACE_VERSION}}
      
      - name: Change access rights for generated sources
        run: |
             sudo chmod 777 -R $GEN_OUT_DIR
             ls -la $GEN_OUT_DIR
      
      - name: Replace RepositoryUrl in csproj-File (necessary for nuget push to GitHub) 
        run: sed -i "s|GIT_USER_ID/GIT_REPO_ID|$GITHUB_REPOSITORY|" $PROJECT_DIR/$PACKAGE_NAME.csproj
            
      - name: Add GitHub Nuget Source
        run: dotnet nuget add source --username $READ_PROXIA_GITHUB_PACKAGES_USER --password $READ_PROXIA_GITHUB_PACKAGES_SECRET --store-password-in-clear-text --name github "$GITHUB_NUGET_REPOSITORY"
            
      - name: Install dependencies
        run: dotnet restore $PROJECT_DIR
      
      - name: Build
        run: dotnet build --configuration Release --no-restore $PROJECT_DIR/
            
      - name: Create the Nuget package
        run: dotnet pack $PROJECT_DIR/$PACKAGE_NAME.csproj --no-build --configuration Release
      
      - name: Publish the Nuget package to Github Package Repository (GPR)
        run: dotnet nuget push $PROJECT_DIR/bin/Release/$PACKAGE_NAME*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source github
      
