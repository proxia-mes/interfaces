name: monitoring-dashboard-gui-service-v1

on:
  push:
    paths:
      - 'monitoring-dashboard-gui-service/v1/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  READ_PROXIA_GITHUB_PACKAGES_USER: flobuc
  READ_PROXIA_GITHUB_PACKAGES_SECRET: ${{ secrets.READ_PROXIA_GITHUB_PACKAGES_SECRET }}
  GEN_OUT_DIR: gen
  INTERFACE_FILE: monitoring-dashboard-gui-service/v1/monitoring-dashboard-gui-service-v1.yaml
  GITHUB_NUGET_REPOSITORY: https://nuget.pkg.github.com/flobuc-proxia/index.json
  GITHUB_NPM_REGISTRY: 'https://npm.pkg.github.com'

jobs:
  generate-csharp-controller:
    runs-on: ubuntu-20.04

    env:
      PACKAGE_NAME: PAG.Mes.MonitoringDashboard.GuiService.ControllerStub
      PROJECT_DIR: gen/src/PAG.Mes.MonitoringDashboard.GuiService.ControllerStub

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create out dir
        run: mkdir -p $GEN_OUT_DIR

      - name: Get interface version from yaml and set to env
        run: echo $INTERFACE_VERSION=`yq eval .info.version $INTERFACE_FILE` >> $GITHUB_ENV 

      - name: Generate C# controller code
        uses: docker://openapitools/openapi-generator-cli
        with:
          args: generate -o /github/workspace/${{env.GEN_OUT_DIR}} -i /github/workspace/${{env.INTERFACE_FILE}} -g aspnetcore --additional-properties aspnetCoreVersion=5.0,buildTarget=library,operationModifier=abstract,packageName=${{env.PACKAGE_NAME}},packageVersion=${{env.INTERFACE_VERSION}}

      - name: Change access rights for generated sources
        run: |
          sudo chmod 777 -R $GEN_OUT_DIR
          ls -la $GEN_OUT_DIR

      - name: Set RepositoryUrl and RepositoryType in csproj-File (necessary for nuget push to GitHub)
        run: |
          sed -i "s|<PropertyGroup>|<PropertyGroup><RepositoryUrl>https://github.com/$GITHUB_REPOSITORY</RepositoryUrl>|" $PROJECT_DIR/$PACKAGE_NAME.csproj
          sed -i "s|<PropertyGroup>|<PropertyGroup><RepositoryType>git</RepositoryType>|" $PROJECT_DIR/$PACKAGE_NAME.csproj

      - name: Add GitHub Nuget Source
        run: dotnet nuget add source --username $READ_PROXIA_GITHUB_PACKAGES_USER --password $READ_PROXIA_GITHUB_PACKAGES_SECRET --store-password-in-clear-text --name github "$GITHUB_NUGET_REPOSITORY"

      - name: Install dependencies
        run: dotnet restore $PROJECT_DIR

      - name: Build
        run: dotnet build --configuration Release --no-restore $PROJECT_DIR/

      - name: Create the Nuget package
        run: dotnet pack $PROJECT_DIR/$PACKAGE_NAME.csproj --no-build --configuration Release

      - name: Publish the Nuget package to Github Package Repository (GPR)
        run: dotnet nuget push $PROJECT_DIR/bin/Release/$PACKAGE_NAME*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source github

  generate-ts-client:
    runs-on: ubuntu-20.04

    env:
      PACKAGE_NAME: '@flobuc-proxia/monitoring-dashboard-gui-service-api'
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create gen dir
        run: mkdir -p $GEN_OUT_DIR

      - name: Generate angular typescript client code
        uses: docker://openapitools/openapi-generator-cli
        with:
          args: generate -o /github/workspace/${{env.GEN_OUT_DIR}} -i /github/workspace/${{env.INTERFACE_FILE}} -g typescript-angular --additional-properties npmName=${{env.PACKAGE_NAME}},npmRepository=${{env.GITHUB_NPM_REGISTRY}}

      - name: Change access rights for generated sources
        run: |
          sudo chmod 777 -R $GEN_OUT_DIR
          ls -la $GEN_OUT_DIR

      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v2
        with:
          node-version: 12.x
          registry-url: ${{env.GITHUB_NPM_REGISTRY}}
          
      - name: Build the module 
        run: |
          cd $GEN_OUT_DIR
          npm install
          npm run build

      - name: Set repository in package.json (necessary for push to GitHub)
        run: |
          sed -i "s|\"name\":|\"repository\":\"https://github.com/$GITHUB_REPOSITORY\",\"name\":|" $GEN_OUT_DIR/dist/package.json
          cat $GEN_OUT_DIR/dist/package.json

      - name: Publish the npm package to Github Package Repository (GPR)
        run: |
          cd $GEN_OUT_DIR/dist
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
