name: proxia-mes_connector_erp-service_v1

on:
  push:
    paths:
      - 'connector/erp-service/v1/*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  READ_PROXIA_GITHUB_PACKAGES_SECRET: ${{ secrets.READ_PROXIA_GITHUB_PACKAGES_SECRET }}
  READ_PROXIA_GITHUB_PACKAGES_USER: flobuc
  GEN_OUT_DIR: gen
  GITHUB_NUGET_REPOSITORY: https://nuget.pkg.github.com/proxia-mes/index.json
  INTERFACE_FILE: connector/erp-service/v1/proxia-mes_connector_erp-service_v1.yaml
  PACKAGE_NAME: PAG.Mes.Connector.ERPService.ControllerStub
  PROJECT_DIR: gen/src/PAG.Mes.Connector.ERPService.ControllerStub
  GIT_TAG_NAME: proxia-mes_connector_erp-service_v1_v

jobs:
  generate-csharp-controller:
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checks-out interfaces repository under $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      - name: Create generator output directory
        run: mkdir -p $GEN_OUT_DIR
        
      - name: Get interface version from OpenAPI Spec yaml and set to env
        run: echo INTERFACE_VERSION=`yq eval .info.version $INTERFACE_FILE` >> $GITHUB_ENV

      - name: Generate C# controller code
        uses: docker://openapitools/openapi-generator-cli:v5.3.0
        with:
          args: generate -o /github/workspace/${{env.GEN_OUT_DIR}} -i /github/workspace/${{env.INTERFACE_FILE}} -g aspnetcore --additional-properties aspnetCoreVersion=5.0,buildTarget=library,operationModifier=abstract,packageName=${{env.PACKAGE_NAME}},packageVersion=${{env.INTERFACE_VERSION}},enumValueSuffix=,removeEnumValuePrefix=false
      
      - name: Change access rights for generated sources
        run: |
             sudo chmod 777 -R $GEN_OUT_DIR
             ls -la $GEN_OUT_DIR
      
      - name: Create empty Models package using packageName (small fix for generator)
        run: |
             echo "namespace $PACKAGE_NAME.Models {}" > $PROJECT_DIR/Models.cs
             cat $PROJECT_DIR/Models.cs
             
      - name: Set RepositoryUrl and RepositoryType in csproj-File (necessary for nuget push to GitHub) 
        run: |
             sed -i "s|<PropertyGroup>|<PropertyGroup><RepositoryUrl>https://github.com/$GITHUB_REPOSITORY</RepositoryUrl>|" $PROJECT_DIR/$PACKAGE_NAME.csproj
             sed -i "s|<PropertyGroup>|<PropertyGroup><RepositoryType>git</RepositoryType>|" $PROJECT_DIR/$PACKAGE_NAME.csproj
            
      - name: Add GitHub Nuget Source
        run: dotnet nuget add source --username $READ_PROXIA_GITHUB_PACKAGES_USER --password $READ_PROXIA_GITHUB_PACKAGES_SECRET --store-password-in-clear-text --name github "$GITHUB_NUGET_REPOSITORY"
      
      - name: Install dependencies
        run: dotnet restore $PROJECT_DIR
      
      - name: Build
        run: dotnet build --configuration Release --no-restore $PROJECT_DIR/
      
      - name: Create the Nuget package
        run: dotnet pack $PROJECT_DIR/$PACKAGE_NAME.csproj --no-build --configuration Release
      
      - name: Publish the Nuget package to Github Package Repository (GPR)
        run: dotnet nuget push $PROJECT_DIR/bin/Release/$PACKAGE_NAME*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source github

      - name: Tag commit with interface version
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.GIT_TAG_NAME }}${{env.INTERFACE_VERSION}}