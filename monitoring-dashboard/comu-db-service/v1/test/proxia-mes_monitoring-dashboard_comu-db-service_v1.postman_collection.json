{
	"info": {
		"_postman_id": "c7d9ac2f-3fe6-4398-8111-a4921e944f29",
		"name": "PROXIA-MES Monitoring-Dashboard COMU-DB-Service API",
		"description": "PROXIA-MES Monitoring-Dashboard COMU-DB-Service API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 Workplaces",
			"item": [
				{
					"name": "1.1 Update workplace",
					"item": [
						{
							"name": "1.1.1 Get all workplaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.2 Update workplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Workplace-1-1-1_Changed-by-test\",\r\n    \"PLANT_ID\": \"0643dc47-a01c-4753-937f-000000000002\",\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000006\",\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000008\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000009",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000009"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.5 Fetch DB update event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000009\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Workplace-1-1-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.after.PLANT_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000002\");\r",
											"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000006\");\r",
											"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000008\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.7 Fetch Service update event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    var EXPECTED_DATA = {\r",
											"        \"workplace\":\r",
											"        {\r",
											"            \"name\": \"Workplace-1-1-1_Changed-by-test\",\r",
											"            \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"            \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"            \"groupName\": \"Workplace-Group-2-1\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.1.9 Get all workplaces with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1_Changed-by-test\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.2 Delete workplace",
					"item": [
						{
							"name": "1.2.1 Get all workplaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1_Changed-by-test\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.2 Delete workplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000009",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000009"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.5 Fetch DB delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.before.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000009\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"d\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.7 Fetch Service delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    var EXPECTED_DATA =\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"op\": \"d\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2.9 Get all workplaces with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.3 Create workplace",
					"item": [
						{
							"name": "1.3.1 Get all workplaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.2 Create workplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RES_ID\": \"0643dc47-a01c-4753-937f-000000000009\",\r\n    \"DISPLAYNAME\": \"Workplace-1-1-1\",\r\n    \"PLANT_ID\": \"0643dc47-a01c-4753-937f-000000000001\",\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000005\",\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000007\",\r\n    \"RES_TYPE_ID\": \"C_WKPL\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.5 Fetch DB create message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000009\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Workplace-1-1-1\");\r",
											"        pm.expect(changeMessage.after.PLANT_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000001\");\r",
											"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000005\");\r",
											"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000007\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"c\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.7 Fetch Service create message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    var EXPECTED_DATA = {\r",
											"        \"workplace\": {\r",
											"            \"name\": \"Workplace-1-1-1\",\r",
											"            \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"            \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"            \"groupName\": \"Workplace-Group-1-1\",\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"op\": \"c\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3.9 Get all workplaces with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.4 Rename workplace group",
					"item": [
						{
							"name": "1.4.1 Get all workplaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.2 Rename workplace group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Workplace-Group-1-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000005",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000005"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000005\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Workplace-Group-1-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"workplace\": {\r",
											"            \"groupName\": \"Workplace-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"workplace\": {\r",
											"            \"groupName\": \"Workplace-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4.9 Get all workplaces with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.5 Rename workplace maingroup",
					"item": [
						{
							"name": "1.5.1 Get all workplaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.2 Rename workplace maingroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Workplace-Maingroup-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000003",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000003"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000003\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Workplace-Maingroup-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"workplace\": {\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"workplace\": {\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_3 = {\r",
											"        \"workplace\": {\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_4 = {\r",
											"        \"workplace\": {\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[2].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_3)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[3].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_4)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5.9 Get all workplaces with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"     {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },   \r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1.6 Move workplace group",
					"item": [
						{
							"name": "1.6.1 Get all workplaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"     {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },   \r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.2 Move workplace group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000004\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000005",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000005"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000005\");\r",
											"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000004\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"workplace\": {\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"workplace\": {\r",
											"            \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"workplace\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6.9 Get all workplaces with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/workplaces';\r",
											"\r",
											"var EXPECTED_DATA =[\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000009\",\r",
											"        \"name\": \"Workplace-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000010\",\r",
											"        \"name\": \"Workplace-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Workplace-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000011\",\r",
											"        \"name\": \"Workplace-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"     {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000012\",\r",
											"        \"name\": \"Workplace-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"groupName\": \"Workplace-Group-2-1\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000016\",\r",
											"        \"name\": \"Workplace-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000015\",\r",
											"        \"name\": \"Workplace-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"groupName\": \"Workplace-Group-2-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000014\",\r",
											"        \"name\": \"Workplace-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    },   \r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000013\",\r",
											"        \"name\": \"Workplace-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"groupName\": \"Workplace-Group-1-2\",\r",
											"        \"mainGroupName\": \"Workplace-Maingroup-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/workplaces",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"workplaces"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2 Machines",
			"item": [
				{
					"name": "2.1 Update machine",
					"item": [
						{
							"name": "2.1.1 Update machine TRS_RES",
							"item": [
								{
									"name": "2.1.1.1 Get all machines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA =[\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"        \"name\": \"Machine-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"        \"groupName\": \"Machine-Group-1-2\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"        \"description\": \"Mach-Description-6\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"        \"name\": \"Machine-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"        \"groupName\": \"Machine-Group-2-1\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"        \"description\": \"Mach-Description-3\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"        \"name\": \"Machine-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"        \"groupName\": \"Machine-Group-1-1\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"        \"description\": \"Mach-Description-2\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"        \"name\": \"Machine-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"        \"groupName\": \"Machine-Group-2-2\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"        \"description\": \"Mach-Description-7\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"        \"name\": \"Machine-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"        \"groupName\": \"Machine-Group-1-2\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"        \"description\": \"Mach-Description-5\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"        \"name\": \"Machine-1-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"        \"groupName\": \"Machine-Group-1-1\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"        \"description\": \"Mach-Description-1\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"        \"name\": \"Machine-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"        \"groupName\": \"Machine-Group-2-2\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"        \"description\": \"Mach-Description-8\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"        \"name\": \"Machine-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"        \"groupName\": \"Machine-Group-2-1\",\r",
													"        \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"        \"description\": \"Mach-Description-4\",\r",
													"        \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({ logger: console, allErrors: true,\r",
													"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function() {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if(ajv.errors){\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.2 Update machine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"DISPLAYNAME\": \"Machine-1-1-1_Changed-by-test\",\r\n    \"PLANT_ID\": \"0643dc47-a01c-4753-937f-000000000002\",\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000020\",\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000008\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000023",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_res",
												"0643dc47-a01c-4753-937f-000000000023"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.4 Subscribe to COMU.dbo.TRS_RES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.5 Fetch DB update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    \r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000023\");\r",
													"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Machine-1-1-1_Changed-by-test\");\r",
													"        pm.expect(changeMessage.after.PLANT_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000002\");\r",
													"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000020\");\r",
													"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000008\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.7 Fetch Service update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    var EXPECTED_DATA = {\r",
													"        \"machine\":\r",
													"        {\r",
													"            \"name\": \"Machine-1-1-1_Changed-by-test\",\r",
													"            \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"            \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"            \"groupName\": \"Machine-Group-2-1\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"        \"op\": \"u\",\r",
													"        \"object\": \"machine\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.1.9 Get all machines with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = [ {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"    \"name\": \"Machine-1-1-1_Changed-by-test\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-1\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
													"},{\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													"    ;\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2.1.2 Update machine TRS_MACHINE",
							"item": [
								{
									"name": "2.1.2.1 Get all machines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = [ {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"    \"name\": \"Machine-1-1-1_Changed-by-test\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-1\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
													"},{\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													"    ;\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.2 Update machine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"DESCRIPTION\": \"Mach-Description-1_Changed-by-test\",\r\n    \"INVENTORY_NUMBER\": \"Mach-Inv-Number-1_Changed-by-test\"\r\n}"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_machine/0643dc47-a01c-4753-937f-000000000023",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_machine",
												"0643dc47-a01c-4753-937f-000000000023"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.4 Subscribe to COMU.dbo.TRS_MACHINE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_MACHINE\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.5 Fetch DB update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    \r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000023\");\r",
													"        pm.expect(changeMessage.after.DESCRIPTION).to.be.equal(\"Mach-Description-1_Changed-by-test\");\r",
													"        pm.expect(changeMessage.after.INVENTORY_NUMBER).to.be.equal(\"Mach-Inv-Number-1_Changed-by-test\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.7 Fetch Service update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test() {\r",
													"    var EXPECTED_DATA = {\r",
													"        \"machine\":\r",
													"        {\r",
													"            \"description\": \"Mach-Description-1_Changed-by-test\",\r",
													"            \"inventoryNumber\": \"Mach-Inv-Number-1_Changed-by-test\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"        \"op\": \"u\",\r",
													"        \"object\": \"machine\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.1.2.9 Get all machines with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = [ {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"    \"name\": \"Machine-1-1-1_Changed-by-test\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-1_Changed-by-test\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-1_Changed-by-test\"\r",
													"},{\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													"    ;\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "2.2 Delete machine",
					"item": [
						{
							"name": "2.2.1 Get all machines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = [ {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1_Changed-by-test\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-1_Changed-by-test\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1_Changed-by-test\"\r",
											"},{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											"    ;\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.2 Delete machine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000023",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000023"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.5 Fetch DB delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.before.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000023\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"d\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.6 Subscribe to COMU.dbo.TRS_MACHINE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_MACHINE\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.7 Fetch DB delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.before.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000023\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"d\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.8 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.9 Fetch Service delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    var EXPECTED_DATA =\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"        \"op\": \"d\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.10 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2.11 Get all machines with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = [ {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											"    ;\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2.3 Create machine",
					"item": [
						{
							"name": "2.3.1 Create machine TRS_RES",
							"item": [
								{
									"name": "2.3.1.1 Get all machines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = [ {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													"    ;\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.2 Create machine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"RES_ID\": \"0643dc47-a01c-4753-937f-000000000023\",\r\n    \"DISPLAYNAME\": \"Machine-1-1-1\",\r\n    \"PLANT_ID\": \"0643dc47-a01c-4753-937f-000000000001\",\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000019\",\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000007\",\r\n    \"RES_TYPE_ID\": \"C_MACH\"\r\n}"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_res",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.4 Subscribe to COMU.dbo.TRS_RES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.5 Fetch DB create message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000023\");\r",
													"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Machine-1-1-1\");\r",
													"        pm.expect(changeMessage.after.PLANT_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000001\");\r",
													"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000019\");\r",
													"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000007\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"c\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.7 Fetch Service create message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test() {\r",
													"    var EXPECTED_DATA = {\r",
													"        \"machine\": {\r",
													"            \"name\": \"Machine-1-1-1\",\r",
													"            \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"            \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"            \"groupName\": \"Machine-Group-1-1\",\r",
													"            \"mainGroupName\": \"Machine-Maingroup-1\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"        \"op\": \"c\",\r",
													"        \"object\": \"machine\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.1.9 Get all machines with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = \r",
													"[{\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"    \"name\": \"Machine-1-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													";\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2.3.2 Create machine TRS_MACHINE",
							"item": [
								{
									"name": "2.3.2.1 Get all machines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = \r",
													"[{\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"    \"name\": \"Machine-1-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													";\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.2 Create machine",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"RES_ID\": \"0643dc47-a01c-4753-937f-000000000023\",\r\n    \"DESCRIPTION\": \"Mach-Description-1\",\r\n    \"INVENTORY_NUMBER\": \"Mach-Inv-Number-1\"\r\n}"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_machine/",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_machine",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.4 Subscribe to COMU.dbo.TRS_MACHINE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_MACHINE\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.5 Fetch DB create message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000023\");\r",
													"        pm.expect(changeMessage.after.DESCRIPTION).to.be.equal(\"Mach-Description-1\");\r",
													"        pm.expect(changeMessage.after.INVENTORY_NUMBER).to.be.equal(\"Mach-Inv-Number-1\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"c\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.7 Fetch Service update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test() {\r",
													"    var EXPECTED_DATA = {\r",
													"        \"machine\": {\r",
													"            \"inventoryNumber\": \"Mach-Inv-Number-1\",\r",
													"            \"description\": \"Mach-Description-1\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"        \"op\": \"u\",\r",
													"        \"object\": \"machine\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "2.3.2.9 Get all machines with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
													"\r",
													"var EXPECTED_DATA = \r",
													"[{\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
													"    \"name\": \"Machine-2-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-6\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
													"    \"name\": \"Machine-1-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-1\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
													"    \"name\": \"Machine-2-1-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"    \"groupName\": \"Machine-Group-1-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-2\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
													"    \"name\": \"Machine-1-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-3\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
													"    \"name\": \"Machine-1-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-7\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
													"    \"name\": \"Machine-1-1-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
													"    \"groupName\": \"Machine-Group-1-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-5\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
													"    \"name\": \"Machine-2-2-2\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
													"    \"groupName\": \"Machine-Group-2-2\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
													"    \"description\": \"Mach-Description-8\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
													"}, {\r",
													"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
													"    \"name\": \"Machine-2-2-1\",\r",
													"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
													"    \"groupName\": \"Machine-Group-2-1\",\r",
													"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
													"    \"description\": \"Mach-Description-4\",\r",
													"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
													"}]\r",
													";\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"machines"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "2.4 Rename machine group",
					"item": [
						{
							"name": "2.4.1 Get all machines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = \r",
											"[{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"    \"groupName\": \"Machine-Group-1-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-1\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											";\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.2 Rename machine group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Machine-Group-1-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000019",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000019"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000019\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Machine-Group-1-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"machine\": {\r",
											"            \"groupName\": \"Machine-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"machine\": {\r",
											"            \"groupName\": \"Machine-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4.9 Get all machines with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = \r",
											"[{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-1\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											";\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2.5 Rename machine maingroup",
					"item": [
						{
							"name": "2.5.1 Get all machines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = \r",
											"[{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-1\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											";\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.2 Rename machine maingroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Machine-Maingroup-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000017",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000017"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000017\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Machine-Maingroup-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"machine\": {\r",
											"            \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"machine\": {\r",
											"            \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_3 = {\r",
											"        \"machine\": {\r",
											"            \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_4 = {\r",
											"        \"machine\": {\r",
											"            \"mainGroupName\": \"machine-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[2].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_3)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[3].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_4)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5.9 Get all machines with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = \r",
											"[{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-1\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											";\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2.6 Move machine group",
					"item": [
						{
							"name": "2.6.1 Get all machines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = \r",
											"[{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-1\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											";\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.2 Move machine group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000018\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000019",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000019"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000019\");\r",
											"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000018\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"machine\": {\r",
											"            \"mainGroupName\": \"Machine-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"machine\": {\r",
											"            \"mainGroupName\": \"Machine-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"machine\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.6.9 Get all machines with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/machines';\r",
											"\r",
											"var EXPECTED_DATA = \r",
											"[{\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000028\",\r",
											"    \"name\": \"Machine-2-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-6\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-6\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000023\",\r",
											"    \"name\": \"Machine-1-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-1\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-1\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000024\",\r",
											"    \"name\": \"Machine-2-1-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"    \"groupName\": \"Machine-Group-1-1_Changed-by-test\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-2\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-2\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000025\",\r",
											"    \"name\": \"Machine-1-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-3\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-3\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000029\",\r",
											"    \"name\": \"Machine-1-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-7\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-7\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000027\",\r",
											"    \"name\": \"Machine-1-1-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"    \"groupName\": \"Machine-Group-1-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-5\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-5\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000030\",\r",
											"    \"name\": \"Machine-2-2-2\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"    \"groupName\": \"Machine-Group-2-2\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-2\",\r",
											"    \"description\": \"Mach-Description-8\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-8\"\r",
											"}, {\r",
											"    \"id\": \"0643dc47-a01c-4753-937f-000000000026\",\r",
											"    \"name\": \"Machine-2-2-1\",\r",
											"    \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"    \"state\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"    \"groupName\": \"Machine-Group-2-1\",\r",
											"    \"mainGroupName\": \"Machine-Maingroup-1_Changed-by-test\",\r",
											"    \"description\": \"Mach-Description-4\",\r",
											"    \"inventoryNumber\": \"Mach-Inv-Number-4\"\r",
											"}]\r",
											";\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/machines",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"machines"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "3 Persons",
			"item": [
				{
					"name": "3.1 Update person",
					"item": [
						{
							"name": "3.1.1 Update person TRS_RES",
							"item": [
								{
									"name": "3.1.1.1 Get all persons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-1\",\r",
													"        \"firstName\": \"First-Name-1\",\r",
													"        \"persId\": \"1\",\r",
													"        \"mail\": \"1@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.2 Update person",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"DISPLAYNAME\": \"Person-1-1-1_Changed-by-test\",\r\n    \"PLANT_ID\": \"0643dc47-a01c-4753-937f-000000000002\",\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000034\",\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000008\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000037",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_res",
												"0643dc47-a01c-4753-937f-000000000037"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.4 Subscribe to COMU.dbo.TRS_RES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.5 Fetch DB update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    \r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000037\");\r",
													"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Person-1-1-1_Changed-by-test\");\r",
													"        pm.expect(changeMessage.after.PLANT_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000002\");\r",
													"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000034\");\r",
													"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000008\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.7 Fetch Service update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    var EXPECTED_DATA = {\r",
													"        \"person\":\r",
													"        {\r",
													"            \"name\": \"Person-1-1-1_Changed-by-test\",\r",
													"            \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"            \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"            \"groupName\": \"Person-Group-2-1\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"op\": \"u\",\r",
													"        \"object\": \"person\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.1.9 Get all persons with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1_Changed-by-test\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-1\",\r",
													"        \"firstName\": \"First-Name-1\",\r",
													"        \"persId\": \"1\",\r",
													"        \"mail\": \"1@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3.1.2 Update person TRS_PERS",
							"item": [
								{
									"name": "3.1.2.1 Get all persons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1_Changed-by-test\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-1\",\r",
													"        \"firstName\": \"First-Name-1\",\r",
													"        \"persId\": \"1\",\r",
													"        \"mail\": \"1@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.2 Update person",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"LAST_NAME\": \"Last-Name-1_Changed-by-test\",\r\n    \"FIRST_NAME\": \"First-Name-1_Changed-by-test\"\r\n}"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_pers/0643dc47-a01c-4753-937f-000000000037",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_pers",
												"0643dc47-a01c-4753-937f-000000000037"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.4 Subscribe to COMU.dbo.TRS_PERS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_PERS\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.5 Fetch DB update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    \r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000037\");\r",
													"        pm.expect(changeMessage.after.LAST_NAME).to.be.equal(\"Last-Name-1_Changed-by-test\");\r",
													"        pm.expect(changeMessage.after.FIRST_NAME).to.be.equal(\"First-Name-1_Changed-by-test\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.7 Fetch Service update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test() {\r",
													"    var EXPECTED_DATA = {\r",
													"        \"person\":\r",
													"        {\r",
													"            \"lastName\": \"Last-Name-1_Changed-by-test\",\r",
													"            \"firstName\": \"First-Name-1_Changed-by-test\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"op\": \"u\",\r",
													"        \"object\": \"person\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.1.2.9 Get all persons with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1_Changed-by-test\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-1_Changed-by-test\",\r",
													"        \"firstName\": \"First-Name-1_Changed-by-test\",\r",
													"        \"persId\": \"1\",\r",
													"        \"mail\": \"1@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "3.2 Delete person",
					"item": [
						{
							"name": "3.2.1 Get all persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1_Changed-by-test\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-1_Changed-by-test\",\r",
											"        \"firstName\": \"First-Name-1_Changed-by-test\",\r",
											"        \"persId\": \"1\",\r",
											"        \"mail\": \"1@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.2 Delete person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000037",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000037"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.5 Fetch DB delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.before.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000037\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"d\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.6 Subscribe to COMU.dbo.TRS_PERS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_PERS\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.7 Fetch DB delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.before.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000037\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"d\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.8 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.9 Fetch Service delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    var EXPECTED_DATA =\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"op\": \"d\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.10 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2.11 Get all persons with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.3 Create person",
					"item": [
						{
							"name": "3.3.1 Create person TRS_RES",
							"item": [
								{
									"name": "3.3.1.1 Get all persons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.2 Create person",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"RES_ID\": \"0643dc47-a01c-4753-937f-000000000037\",\r\n    \"DISPLAYNAME\": \"Person-1-1-1\",\r\n    \"PLANT_ID\": \"0643dc47-a01c-4753-937f-000000000001\",\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000033\",\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000007\",\r\n    \"RES_TYPE_ID\": \"C_PERS\"\r\n}"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_res",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.4 Subscribe to COMU.dbo.TRS_RES",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.5 Fetch DB create message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000037\");\r",
													"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Person-1-1-1\");\r",
													"        pm.expect(changeMessage.after.PLANT_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000001\");\r",
													"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000033\");\r",
													"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000007\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"c\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.7 Fetch Service create message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test() {\r",
													"    var EXPECTED_DATA = {\r",
													"        \"person\": {\r",
													"            \"name\": \"Person-1-1-1\",\r",
													"            \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"            \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"            \"groupName\": \"Person-Group-1-1\",\r",
													"            \"mainGroupName\": \"Person-Maingroup-1\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"op\": \"c\",\r",
													"        \"object\": \"person\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.1.9 Get all persons with changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3.3.2 Create person TRS_PERS",
							"item": [
								{
									"name": "3.3.2.1 Get all persons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.2 Create person",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"RES_ID\": \"0643dc47-a01c-4753-937f-000000000037\",\r\n    \"LAST_NAME\": \"Last-Name-1\",\r\n    \"FIRST_NAME\": \"First-Name-1\"\r\n}"
										},
										"url": {
											"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_pers/",
											"protocol": "{{db-protocol}}",
											"host": [
												"{{db-host}}"
											],
											"port": "{{db-port}}",
											"path": [
												"trs_pers",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.3 Create consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.4 Subscribe to COMU.dbo.TRS_PERS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_PERS\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.5 Fetch DB create message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test(){\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000037\");\r",
													"        pm.expect(changeMessage.after.LAST_NAME).to.be.equal(\"Last-Name-1\");\r",
													"        pm.expect(changeMessage.after.FIRST_NAME).to.be.equal(\"First-Name-1\");\r",
													"        pm.expect(changeMessage.op).to.be.equal(\"c\");\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.6 Subscribe to monitoring-dashboard.comu-db-service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.v2+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.7 Fetch Service update message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function test() {\r",
													"    var EXPECTED_DATA = {\r",
													"        \"person\": {\r",
													"            \"lastName\": \"Last-Name-1\",\r",
													"            \"firstName\": \"First-Name-1\"\r",
													"        },\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"op\": \"u\",\r",
													"        \"object\": \"person\"\r",
													"    };\r",
													"\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response data is correct\", function () {\r",
													"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
													"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"//-------------------------------------------------------------------------------------------------\r",
													"//Retry until message arrives\r",
													"const maxNumberOfTries = 20; // your max number of tries\r",
													"const sleepBetweenTries = 500; // your interval between attempts\r",
													"\r",
													"if (!pm.environment.get(\"tries\")) {\r",
													"    pm.environment.set(\"tries\", 1);\r",
													"}\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
													"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
													"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
													"    pm.environment.set(\"tries\", tries + 1);\r",
													"    setTimeout(function () { }, sleepBetweenTries);\r",
													"    postman.setNextRequest(request.name);\r",
													"} else {\r",
													"    pm.environment.unset(\"tries\");\r",
													"\r",
													"    test();\r",
													"\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer",
												"records"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.8 Delete consumer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.kafka.json.v2+json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
											"protocol": "{{kafka-protocol}}",
											"host": [
												"{{kafka-host}}"
											],
											"port": "{{kafka-port}}",
											"path": [
												"consumers",
												"postman_consumer_group",
												"instances",
												"postman_consumer"
											]
										}
									},
									"response": []
								},
								{
									"name": "3.3.2.9 Get all persons with change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//OpenApi #ref for the response data in the schema\r",
													"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
													"\r",
													"var EXPECTED_DATA = [\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
													"        \"name\": \"Person-1-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-1\",\r",
													"        \"firstName\": \"First-Name-1\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
													"        \"name\": \"Person-1-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-3\",\r",
													"        \"firstName\": \"First-Name-3\",\r",
													"        \"persId\": \"3\",\r",
													"        \"mail\": \"3@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
													"        \"name\": \"Person-2-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-8\",\r",
													"        \"firstName\": \"First-Name-8\",\r",
													"        \"persId\": \"8\",\r",
													"        \"mail\": \"8@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
													"        \"name\": \"Person-2-1-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-1-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-2\",\r",
													"        \"firstName\": \"First-Name-2\",\r",
													"        \"persId\": \"2\",\r",
													"        \"mail\": \"2@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
													"        \"name\": \"Person-2-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-6\",\r",
													"        \"firstName\": \"First-Name-6\",\r",
													"        \"persId\": \"6\",\r",
													"        \"mail\": \"6@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
													"        \"name\": \"Person-2-2-1\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
													"        \"groupName\": \"Person-Group-2-1\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
													"        \"lastName\": \"Last-Name-4\",\r",
													"        \"firstName\": \"First-Name-4\",\r",
													"        \"persId\": \"4\",\r",
													"        \"mail\": \"4@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
													"        \"name\": \"Person-1-2-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-2-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-7\",\r",
													"        \"firstName\": \"First-Name-7\",\r",
													"        \"persId\": \"7\",\r",
													"        \"mail\": \"7@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    },\r",
													"    {\r",
													"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
													"        \"name\": \"Person-1-1-2\",\r",
													"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
													"        \"groupName\": \"Person-Group-1-2\",\r",
													"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
													"        \"lastName\": \"Last-Name-5\",\r",
													"        \"firstName\": \"First-Name-5\",\r",
													"        \"persId\": \"5\",\r",
													"        \"mail\": \"5@mail.de\",\r",
													"        \"mobile\": \"123456\"\r",
													"    }\r",
													"];\r",
													"\r",
													"//------------------------------------------------------------------------------\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Prepare validator\r",
													"var Ajv = require('ajv');\r",
													"ajv = new Ajv({\r",
													"    logger: console, allErrors: true,\r",
													"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
													"});\r",
													"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
													"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
													"\r",
													"//Get response body data\r",
													"console.log('---------------');\r",
													"var responseJson = pm.response.json();\r",
													"console.log(responseJson);\r",
													"\r",
													"//Validate the response body data against the schema\r",
													"pm.test('Response data are valid schema data', function () {\r",
													"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
													"});\r",
													"\r",
													"//Log validation errors to console\r",
													"if (ajv.errors) {\r",
													"    console.log(ajv.errors);\r",
													"}\r",
													"\r",
													"pm.test(\"Response data is correct\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
											"protocol": "{{service-protocol}}",
											"host": [
												"{{service-host}}"
											],
											"port": "{{service-port}}{{service-context}}",
											"path": [
												"persons"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "3.4 Rename person group",
					"item": [
						{
							"name": "3.4.1 Get all persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Person-Group-1-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-1\",\r",
											"        \"firstName\": \"First-Name-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.2 Rename person group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Person-Group-1-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000033",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000033"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000033\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Person-Group-1-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"person\": {\r",
											"            \"groupName\": \"Person-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"person\": {\r",
											"            \"groupName\": \"Person-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.4.9 Get all persons with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-1\",\r",
											"        \"firstName\": \"First-Name-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.5 Rename person maingroup",
					"item": [
						{
							"name": "3.5.1 Get all persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-1\",\r",
											"        \"firstName\": \"First-Name-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.2 Rename person maingroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Person-Maingroup-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000031",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000031"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000031\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Person-Maingroup-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"person\": {\r",
											"            \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"person\": {\r",
											"            \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_3 = {\r",
											"        \"person\": {\r",
											"            \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_4 = {\r",
											"        \"person\": {\r",
											"            \"mainGroupName\": \"person-Maingroup-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[2].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_3)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[3].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_4)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.5.9 Get all persons with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-1\",\r",
											"        \"firstName\": \"First-Name-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3.6 Move person group",
					"item": [
						{
							"name": "3.6.1 Get all persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-1\",\r",
											"        \"firstName\": \"First-Name-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.2 Move person group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PARENT_RES_ID\": \"0643dc47-a01c-4753-937f-000000000032\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000033",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000033"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000033\");\r",
											"        pm.expect(changeMessage.after.PARENT_RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000032\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"person\": {\r",
											"            \"mainGroupName\": \"Person-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"person\": {\r",
											"            \"mainGroupName\": \"Person-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"person\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.6.9 Get all persons with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/persons';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000037\",\r",
											"        \"name\": \"Person-1-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"state\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-1\",\r",
											"        \"firstName\": \"First-Name-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000039\",\r",
											"        \"name\": \"Person-1-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-3\",\r",
											"        \"firstName\": \"First-Name-3\",\r",
											"        \"persId\": \"3\",\r",
											"        \"mail\": \"3@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000044\",\r",
											"        \"name\": \"Person-2-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-8\",\r",
											"        \"firstName\": \"First-Name-8\",\r",
											"        \"persId\": \"8\",\r",
											"        \"mail\": \"8@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000038\",\r",
											"        \"name\": \"Person-2-1-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-2\",\r",
											"        \"firstName\": \"First-Name-2\",\r",
											"        \"persId\": \"2\",\r",
											"        \"mail\": \"2@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000042\",\r",
											"        \"name\": \"Person-2-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-6\",\r",
											"        \"firstName\": \"First-Name-6\",\r",
											"        \"persId\": \"6\",\r",
											"        \"mail\": \"6@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000040\",\r",
											"        \"name\": \"Person-2-2-1\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"groupName\": \"Person-Group-2-1\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-1_Changed-by-test\",\r",
											"        \"lastName\": \"Last-Name-4\",\r",
											"        \"firstName\": \"First-Name-4\",\r",
											"        \"persId\": \"4\",\r",
											"        \"mail\": \"4@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000043\",\r",
											"        \"name\": \"Person-1-2-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-2-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-7\",\r",
											"        \"firstName\": \"First-Name-7\",\r",
											"        \"persId\": \"7\",\r",
											"        \"mail\": \"7@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000041\",\r",
											"        \"name\": \"Person-1-1-2\",\r",
											"        \"plant\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"groupName\": \"Person-Group-1-2\",\r",
											"        \"mainGroupName\": \"Person-Maingroup-2\",\r",
											"        \"lastName\": \"Last-Name-5\",\r",
											"        \"firstName\": \"First-Name-5\",\r",
											"        \"persId\": \"5\",\r",
											"        \"mail\": \"5@mail.de\",\r",
											"        \"mobile\": \"123456\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/persons",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "4 Plants",
			"item": [
				{
					"name": "4.1 Update plant",
					"item": [
						{
							"name": "4.1.1 Get all plants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/plants';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"name\": \"Plant-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"name\": \"Plant-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/plants",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"plants"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.2 Update plant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Plant-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res/0643dc47-a01c-4753-937f-000000000001",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res",
										"0643dc47-a01c-4753-937f-000000000001"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.4 Subscribe to COMU.dbo.TRS_RES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.5 Fetch DB update event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_ID).to.be.equal(\"0643dc47-a01c-4753-937f-000000000001\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Plant-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.7 Fetch Service update event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    var EXPECTED_DATA = {\r",
											"        \"plant\":\r",
											"        {\r",
											"            \"name\": \"Plant-1_Changed-by-test\",\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"plant\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.9 Get all plants with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/plants';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000001\",\r",
											"        \"name\": \"Plant-1_Changed-by-test\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-937f-000000000002\",\r",
											"        \"name\": \"Plant-2\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/plants",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"plants"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "5 Resource-statuses",
			"item": [
				{
					"name": "5.1 Update resource-status",
					"item": [
						{
							"name": "5.1.1 Get all resource-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.2 Update resource-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Resource-Status-1-1-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res_status/0643dc47-a01c-4753-936f-000000000007",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res_status",
										"0643dc47-a01c-4753-936f-000000000007"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.4 Subscribe to COMU.dbo.TRS_RES_STATUS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES_STATUS\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.5 Fetch DB update event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000007\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Resource-Status-1-1-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.7 Fetch Service update event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    var EXPECTED_DATA = {\r",
											"        \"resource-status\":\r",
											"        {\r",
											"            \"name\": \"Resource-Status-1-1-1_Changed-by-test\",\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.9 Get all resource-statuses with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1_Changed-by-test\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.2 Delete resource-status",
					"item": [
						{
							"name": "5.2.1 Get all resource-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1_Changed-by-test\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.2 Delete resource-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res_status/0643dc47-a01c-4753-936f-000000000007",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res_status",
										"0643dc47-a01c-4753-936f-000000000007"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.4 Subscribe to COMU.dbo.TRS_RES_STATUS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES_STATUS\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.5 Fetch DB delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.before.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000007\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"d\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.7 Fetch Service delete message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"\r",
											"    var EXPECTED_DATA =\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"op\": \"d\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2.9 Get all resource-statuses with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.3 Create resource-status",
					"item": [
						{
							"name": "5.3.1 Get all resource-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({\r",
											"    logger: console, allErrors: true,\r",
											"    verbose: true, coerceTypes: true, unknownFormats: ['int32']\r",
											"});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function () {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if (ajv.errors) {\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.2 Create resource-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RES_STATUS_ID\": \"0643dc47-a01c-4753-936f-000000000007\",\r\n    \"RES_STATUS_GRP_ID\": \"0643dc47-a01c-4753-936f-000000000003\",\r\n    \"DISPLAYNAME\": \"Resource-Status-1-1-1\",\r\n    \"RES_STATUS_COLOR\": \"yellow\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res_status/",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res_status",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.4 Subscribe to COMU.dbo.TRS_RES_STATUS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES_STATUS\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.5 Fetch DB create message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_STATUS_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000007\");\r",
											"        pm.expect(changeMessage.after.RES_STATUS_GRP_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000003\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Resource-Status-1-1-1\");\r",
											"        pm.expect(changeMessage.after.RES_STATUS_COLOR).to.be.equal(\"yellow\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"c\");\r",
											"    });\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.7 Fetch Service create message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA = {\r",
											"        \"resource-status\": {\r",
											"            \"name\": \"Resource-Status-1-1-1\",\r",
											"            \"color\": \"yellow\",\r",
											"            \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"            \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"op\": \"c\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA)).to.be.true;\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.9 Get all resource-statuses with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.4 Rename resource-status-group",
					"item": [
						{
							"name": "5.4.1 Get all resource-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.2 Rename resource-status-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"DISPLAYNAME\": \"Resource-Status-Group-1-1_Changed-by-test\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res_status_grp/0643dc47-a01c-4753-936f-000000000003",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res_status_grp",
										"0643dc47-a01c-4753-936f-000000000003"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.4 Subscribe to COMU.dbo.TRS_RES_STATUS_GRP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES_STATUS_GRP\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test(){\r",
											"    \r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_STATUS_GRP_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000003\");\r",
											"        pm.expect(changeMessage.after.DISPLAYNAME).to.be.equal(\"Resource-Status-Group-1-1_Changed-by-test\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"\r",
											"}\r",
											"\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"resource-status\": {\r",
											"            \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"resource-status\": {\r",
											"            \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.9 Get all resource-statuses with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.5 Move resource-status-group",
					"item": [
						{
							"name": "5.5.1 Get all resource-statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.2 Move resource-status-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RES_STATUS_MAINGRP_ID\": \"0643dc47-a01c-4753-936f-000000000002\"\r\n}"
								},
								"url": {
									"raw": "{{db-protocol}}://{{db-host}}:{{db-port}}/trs_res_status_grp/0643dc47-a01c-4753-936f-000000000003",
									"protocol": "{{db-protocol}}",
									"host": [
										"{{db-host}}"
									],
									"port": "{{db-port}}",
									"path": [
										"trs_res_status_grp",
										"0643dc47-a01c-4753-936f-000000000003"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.3 Create consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"postman_consumer\",\r\n    \"auto.offset.reset\": \"earliest\"\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.4 Subscribe to COMU.dbo.TRS_RES_STATUS_GRP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"COMU.dbo.TRS_RES_STATUS_GRP\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.5 Fetch DB update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(changeMessage.after.RES_STATUS_GRP_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000003\");\r",
											"        pm.expect(changeMessage.after.RES_STATUS_MAINGRP_ID).to.be.equal(\"0643dc47-a01c-4753-936f-000000000002\");\r",
											"        pm.expect(changeMessage.op).to.be.equal(\"u\");\r",
											"    });\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.6 Subscribe to monitoring-dashboard.comu-db-service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.v2+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topics\": [\r\n        \"monitoring-dashboard.comu-db-service\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/subscription",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.7 Fetch Service update message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function test() {\r",
											"    var EXPECTED_DATA_1 = {\r",
											"        \"resource-status\": {\r",
											"            \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"\r",
											"    var EXPECTED_DATA_2 = {\r",
											"        \"resource-status\": {\r",
											"            \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"        },\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"op\": \"u\",\r",
											"        \"object\": \"resource-status\"\r",
											"    };\r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Response data is correct\", function () {\r",
											"        var changeMessage = JSON.parse(atob(pm.response.json()[0].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_1)).to.be.true;\r",
											"\r",
											"        changeMessage = JSON.parse(atob(pm.response.json()[1].value));\r",
											"        pm.expect(_.isEqual(changeMessage, EXPECTED_DATA_2)).to.be.true;\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"//-------------------------------------------------------------------------------------------------\r",
											"//Retry until message arrives\r",
											"const maxNumberOfTries = 20; // your max number of tries\r",
											"const sleepBetweenTries = 500; // your interval between attempts\r",
											"\r",
											"if (!pm.environment.get(\"tries\")) {\r",
											"    pm.environment.set(\"tries\", 1);\r",
											"}\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"if ((jsonData.length === 0) && (pm.environment.get(\"tries\") < maxNumberOfTries)) {\r",
											"    console.log(\"Wait \" + pm.environment.get(\"tries\"))\r",
											"    const tries = parseInt(pm.environment.get(\"tries\"), 10);\r",
											"    pm.environment.set(\"tries\", tries + 1);\r",
											"    setTimeout(function () { }, sleepBetweenTries);\r",
											"    postman.setNextRequest(request.name);\r",
											"} else {\r",
											"    pm.environment.unset(\"tries\");\r",
											"\r",
											"    test();\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer/records",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.8 Delete consumer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.kafka.json.v2+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{kafka-protocol}}://{{kafka-host}}:{{kafka-port}}/consumers/postman_consumer_group/instances/postman_consumer",
									"protocol": "{{kafka-protocol}}",
									"host": [
										"{{kafka-host}}"
									],
									"port": "{{kafka-port}}",
									"path": [
										"consumers",
										"postman_consumer_group",
										"instances",
										"postman_consumer"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.5.9 Get all resource-statuses with changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//OpenApi #ref for the response data in the schema\r",
											"var RESPONSE_DATA_SCHEMA_REF = 'proxia#/components/schemas/resourceStatuses';\r",
											"\r",
											"var EXPECTED_DATA = [\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000007\",\r",
											"        \"name\": \"Resource-Status-1-1-1\",\r",
											"        \"color\": \"yellow\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000009\",\r",
											"        \"name\": \"Resource-Status-1-2-1\",\r",
											"        \"color\": \"pink\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000012\",\r",
											"        \"name\": \"Resource-Status-2-1-2\",\r",
											"        \"color\": \"blue\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000014\",\r",
											"        \"name\": \"Resource-Status-2-2-2\",\r",
											"        \"color\": \"magenta\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000011\",\r",
											"        \"name\": \"Resource-Status-1-1-2\",\r",
											"        \"color\": \"green\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000013\",\r",
											"        \"name\": \"Resource-Status-1-2-2\",\r",
											"        \"color\": \"orange\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-2\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000008\",\r",
											"        \"name\": \"Resource-Status-2-1-1\",\r",
											"        \"color\": \"red\",\r",
											"        \"groupName\": \"Resource-Status-Group-1-1_Changed-by-test\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-2\"\r",
											"    },\r",
											"    {\r",
											"        \"id\": \"0643dc47-a01c-4753-936f-000000000010\",\r",
											"        \"name\": \"Resource-Status-2-2-1\",\r",
											"        \"color\": \"black\",\r",
											"        \"groupName\": \"Resource-Status-Group-2-1\",\r",
											"        \"mainGroupName\": \"Resource-Status-Maingroup-1\"\r",
											"    }\r",
											"];\r",
											"\r",
											"//------------------------------------------------------------------------------\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Prepare validator\r",
											"var Ajv = require('ajv');\r",
											"ajv = new Ajv({ logger: console, allErrors: true,\r",
											"            verbose: true, coerceTypes: true, unknownFormats: ['int32']});\r",
											"//console.log(JSON.parse(pm.globals.get('schemaJson')));\r",
											"ajv.addSchema(JSON.parse(pm.globals.get('schemaJson')), 'proxia');\r",
											"\r",
											"//Get response body data\r",
											"console.log('---------------');\r",
											"var responseJson = pm.response.json();\r",
											"console.log(responseJson);\r",
											"\r",
											"//Validate the response body data against the schema\r",
											"pm.test('Response data are valid schema data', function() {\r",
											"    pm.expect(ajv.validate({ $ref: RESPONSE_DATA_SCHEMA_REF }, responseJson), JSON.stringify(ajv.errors)).to.be.true;\r",
											"});\r",
											"\r",
											"//Log validation errors to console\r",
											"if(ajv.errors){\r",
											"    console.log(ajv.errors);\r",
											"}\r",
											"\r",
											"pm.test(\"Response data is correct\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.deep.members(EXPECTED_DATA);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{service-protocol}}://{{service-host}}:{{service-port}}{{service-context}}/resource-statuses",
									"protocol": "{{service-protocol}}",
									"host": [
										"{{service-host}}"
									],
									"port": "{{service-port}}{{service-context}}",
									"path": [
										"resource-statuses"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.globals.get(\"schemaJson\")) {//Get external lib for converting yaml to json schema",
					"    pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js', (error, response) => {",
					"        if (error || response.code !== 200) {",
					"            pm.expect.fail('Could not load external library js-yaml!');",
					"        }",
					"        //load lib",
					"        eval(response.text());",
					"",
					"        //Get OpenApi schema from http://github.com/proxia-mes/interfaces",
					"        pm.sendRequest(pm.collectionVariables.get('schemaUrl'), (error, response) => {",
					"            if (error || response.code !== 200) {",
					"                pm.expect.fail('Could not load openApiSchema: ' + pm.collectionVariables.get('schemaUrl'));",
					"            }",
					"",
					"            //Convert Yaml schema to Json schema        ",
					"            var schemaYaml = response.text();",
					"            var schemaJson = this.jsyaml.load(schemaYaml);",
					"",
					"            //Save schema to global ",
					"            pm.globals.set(\"schemaJson\", JSON.stringify(schemaJson));",
					"            //console.log(schemaJson);",
					"        });",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schemaUrl",
			"value": "https://raw.githubusercontent.com/proxia-mes/interfaces/main/monitoring-dashboard/comu-db-service/v1/proxia-mes_monitoring-dashboard_comu-db-service_v1.yaml"
		},
		{
			"key": "service-context",
			"value": "/proxia-mes/monitoring-dashboard/comu-db-service/v1"
		},
		{
			"key": "service-host",
			"value": "localhost"
		},
		{
			"key": "service-port",
			"value": "5000"
		},
		{
			"key": "service-protocol",
			"value": "http"
		},
		{
			"key": "kafka-host",
			"value": "localhost"
		},
		{
			"key": "kafka-port",
			"value": "8082"
		},
		{
			"key": "kafka-protocol",
			"value": "http"
		},
		{
			"key": "db-port",
			"value": "1450"
		},
		{
			"key": "db-protocol",
			"value": "http"
		},
		{
			"key": "db-host",
			"value": "localhost"
		}
	]
}