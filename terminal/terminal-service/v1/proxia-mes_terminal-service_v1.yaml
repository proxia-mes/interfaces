---
openapi: 3.0.1
info:
  title: PROXIA Terminal Sevice
  version: v1
  servers:
  - url: "http://localhost:5000/proxia/mes/terminal-service/interface/v1"
paths:
  "/proxia/mes/terminal-service/interface/v1/configuration/terminal":
    get:
      tags:
      - Configurations
      summary: Returns settings for a terminal
      operationId: GetTerminalConfigurationAsync
      parameters:
      - name: configId
        in: query
        description: ID of a terminal configuration
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returns settings for a terminal
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConfigurationTerminalDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/users/assigned":
    get:
      tags:
      - User
      summary: Returns users which are assigned to a work place. It is recommended
        to filter data using page parameters.
      operationId: GetAssignedUsersAsync
      parameters:
      - name: workplaceId
        in: path
        description: ID of work place
        required: true
        schema:
          type: string
      - name: StartRow
        in: query
        description: Number of first page to be shown.
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: RowCount
        in: query
        description: Number of rows to return
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 10
      - name: UseCache
        in: query
        description: Determines if server can use cached data.
        schema:
          type: boolean
          default: false
      - name: SortOrder
        in: query
        description: "Sorting order.\r\nUsers are sorted first by last name and then
          by first name.\r\nDefault sorting order: Ascending"
        schema:
          "$ref": "#/components/schemas/SortOrders"
      - name: TerminalId
        in: query
        description: Unique ID of terminal from configuration settings
        schema:
          type: string
      - name: FilterValue
        in: query
        description: "Searched value is used to filter data.\r\nAll user's properties
          are used by search."
        schema:
          type: string
      responses:
        '200':
          description: Returns details of a page and assigned users
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDtoPagedResultData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/users/shift-relevant":
    get:
      tags:
      - User
      summary: Returns users which are relevant for the current and next shift. Data
        can be optionally filtered.
      operationId: GetAssignedUsersForShiftAsync
      parameters:
      - name: workplaceId
        in: path
        description: ID of work place
        required: true
        schema:
          type: string
      - name: shiftCount
        in: query
        description: Number of shifts starting from the current one
        required: true
        schema:
          maximum: 2147483647
          minimum: 1
          type: integer
          format: int32
      - name: StartRow
        in: query
        description: Number of first page to be shown.
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: RowCount
        in: query
        description: Number of rows to return
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 10
      - name: UseCache
        in: query
        description: Determines if server can use cached data.
        schema:
          type: boolean
          default: false
      - name: SortOrder
        in: query
        description: "Sorting order.\r\nUsers are sorted first by last name and then
          by first name.\r\nDefault sorting order: Ascending"
        schema:
          "$ref": "#/components/schemas/SortOrders"
      - name: TerminalId
        in: query
        description: Unique ID of terminal from configuration settings
        schema:
          type: string
      - name: FilterValue
        in: query
        description: "Searched value is used to filter data.\r\nAll user's properties
          are used by search."
        schema:
          type: string
      responses:
        '200':
          description: Returns shift relevant users
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserShiftDtoPagedResultData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/users/login":
    post:
      tags:
      - User
      summary: Logs in users on a work place
      operationId: UsersLoginAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/UserLoginDto"
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/users/logout":
    post:
      tags:
      - User
      summary: Logs out users from a work place
      operationId: UsersLogoutAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/UserLogoutDto"
        required: true
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/users/logout-all-workplaces":
    post:
      tags:
      - User
      summary: Logs out a user from all work places
      operationId: UserLogoutAllWorkplacesAsync
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserLogoutDto"
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/Workplaces":
    get:
      tags:
      - Workplaces
      summary: Returns detailed information about work places
      operationId: GetWorkplaceListAsync
      parameters:
      - name: workplaceId
        in: query
        description: Array of work place ids
        required: true
        schema:
          type: array
          items:
            type: string
      - name: MaxWorkTicketCount
        in: query
        description: "Determines maximal number of work tickets.\r\nWork tickets are
          always sorted by planned begin time.\r\nin a workplace"
        required: true
        schema:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
          default: 3
      responses:
        '200':
          description: List of work places
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/WorkplaceDataDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/Workplaces/config":
    get:
      tags:
      - Workplaces
      summary: Returns work places configured for a terminal.
      operationId: GetWorkplacesByConfigurationIdsync
      parameters:
      - name: configurationId
        in: query
        description: Id of terminal configuration
        required: true
        schema:
          type: string
      - name: MaxWorkTicketCount
        in: query
        description: "Determines maximal number of work tickets.\r\nWork tickets are
          always sorted by planned begin time.\r\nin a workplace"
        required: true
        schema:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
          default: 3
      responses:
        '200':
          description: Returns list of work places.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkplaceDataDtoIEnumerator"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/Workplaces/{workplaceId}/new-status":
    put:
      tags:
      - Workplaces
      summary: Changes a status of a work place to a new status
      operationId: ChangeStatusAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewStatusDto"
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/{workTicketId}/revision-action":
    post:
      tags:
      - WorkTickets
      summary: Executes revision of a work ticket
      operationId: ExecuteRevisionAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: workTicketId
        in: path
        description: Work ticket id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RevisionInputDataDto"
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/{workTicketId}/logon":
    post:
      tags:
      - WorkTickets
      summary: Logs a work ticket on a work place
      operationId: WorkTicketLogonAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: workTicketId
        in: path
        description: Work ticket id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WorkTicketUserDto"
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/logon":
    post:
      tags:
      - WorkTickets
      summary: Logs multiple work tickets on a work place
      operationId: WorkTicketsLogonAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WorkTicketMultiLogonDto"
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/{workTicketId}/logoff":
    post:
      tags:
      - WorkTickets
      summary: Logs a work ticket off from a work place
      operationId: WorkTicketLogoffAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: workTicketId
        in: path
        description: Work ticket id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WorkTicketSingleLogoffDto"
      responses:
        '200':
          description: Result summary
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/logged":
    get:
      tags:
      - WorkTickets
      summary: Returns all work tickets which are logged on a work place. It is recommended
        to filter data using filter parameters.
      operationId: GetLoggedWorkTicketsAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: StartRow
        in: query
        description: "Number of first page to be shown.\r\nDefault value: 1"
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: RowCount
        in: query
        description: Number of rows to return
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 10
      - name: UseCache
        in: query
        description: "Determines if server can use cached data.\r\nDefault value:
          false"
        schema:
          type: boolean
          default: false
      - name: TerminalId
        in: query
        schema:
          type: string
      - name: SearchType
        in: query
        description: "Determines search pattern.\r\nDefault value: 'None' - data is
          not filtered"
        schema:
          "$ref": "#/components/schemas/WorkTicketSearchType"
      - name: FilterValue
        in: query
        description: Searched value
        schema:
          type: string
      - name: FilterColumns
        in: query
        description: ID of a columns which should be searched
        schema:
          type: array
          items:
            type: string
      - name: SortOrder
        in: query
        description: "Determines direction of data sorting\r\nDefault value: Ascending"
        schema:
          "$ref": "#/components/schemas/SortOrders"
      - name: SortColumnId
        in: query
        description: ID of a column by which data should be sorted
        schema:
          type: string
      responses:
        '200':
          description: Returns work tickets which are logged on a work place and page
            details.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoolOfOrdersDtoPagedResultData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/pending":
    get:
      tags:
      - WorkTickets
      summary: Returns all work tickets which assigned and not logged on a work place.
        It is recommended to filter data using filter parameters.
      operationId: GetPendingWorkTicketsAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: StartRow
        in: query
        description: "Number of first page to be shown.\r\nDefault value: 1"
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: RowCount
        in: query
        description: Number of rows to return
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 10
      - name: UseCache
        in: query
        description: "Determines if server can use cached data.\r\nDefault value:
          false"
        schema:
          type: boolean
          default: false
      - name: TerminalId
        in: query
        schema:
          type: string
      - name: SearchType
        in: query
        description: "Determines search pattern.\r\nDefault value: 'None' - data is
          not filtered"
        schema:
          "$ref": "#/components/schemas/WorkTicketSearchType"
      - name: FilterValue
        in: query
        description: Searched value
        schema:
          type: string
      - name: FilterColumns
        in: query
        description: ID of a columns which should be searched
        schema:
          type: array
          items:
            type: string
      - name: SortOrder
        in: query
        description: "Determines direction of data sorting\r\nDefault value: Ascending"
        schema:
          "$ref": "#/components/schemas/SortOrders"
      - name: SortColumnId
        in: query
        description: ID of a column by which data should be sorted
        schema:
          type: string
      responses:
        '200':
          description: Returns pending work tickets and page details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoolOfOrdersDtoPagedResultData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/manual":
    get:
      tags:
      - WorkTickets
      summary: Returns all manual work tickets for a work place. It is recommended
        to filter data using filter parameters.
      operationId: GetManualWorkTicketsAsync
      parameters:
      - name: workplaceId
        in: path
        required: true
        schema:
          type: string
      - name: StartRow
        in: query
        description: "Number of first page to be shown.\r\nDefault value: 1"
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: RowCount
        in: query
        description: Number of rows to return
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 10
      - name: UseCache
        in: query
        description: "Determines if server can use cached data.\r\nDefault value:
          false"
        schema:
          type: boolean
          default: false
      - name: TerminalId
        in: query
        schema:
          type: string
      - name: SearchType
        in: query
        description: "Determines search pattern.\r\nDefault value: 'None' - data is
          not filtered"
        schema:
          "$ref": "#/components/schemas/WorkTicketSearchType"
      - name: FilterValue
        in: query
        description: Searched value
        schema:
          type: string
      - name: FilterColumns
        in: query
        description: ID of a columns which should be searched
        schema:
          type: array
          items:
            type: string
      - name: SortOrder
        in: query
        description: "Determines direction of data sorting\r\nDefault value: Ascending"
        schema:
          "$ref": "#/components/schemas/SortOrders"
      - name: SortColumnId
        in: query
        description: ID of a column by which data should be sorted
        schema:
          type: string
      responses:
        '200':
          description: Returns manual work tickets and page details.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoolOfOrdersDtoPagedResultData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/internal":
    get:
      tags:
      - WorkTickets
      summary: Returns internal work tickets for a work place. It is recommended to
        filter data using filter parameters.
      operationId: GetInternalWorkTicketsAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: StartRow
        in: query
        description: "Number of first page to be shown.\r\nDefault value: 1"
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: RowCount
        in: query
        description: Number of rows to return
        schema:
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
          default: 10
      - name: UseCache
        in: query
        description: "Determines if server can use cached data.\r\nDefault value:
          false"
        schema:
          type: boolean
          default: false
      - name: TerminalId
        in: query
        schema:
          type: string
      - name: SearchType
        in: query
        description: "Determines search pattern.\r\nDefault value: 'None' - data is
          not filtered"
        schema:
          "$ref": "#/components/schemas/WorkTicketSearchType"
      - name: FilterValue
        in: query
        description: Searched value
        schema:
          type: string
      - name: FilterColumns
        in: query
        description: ID of a columns which should be searched
        schema:
          type: array
          items:
            type: string
      - name: SortOrder
        in: query
        description: "Determines direction of data sorting\r\nDefault value: Ascending"
        schema:
          "$ref": "#/components/schemas/SortOrders"
      - name: SortColumnId
        in: query
        description: ID of a column by which data should be sorted
        schema:
          type: string
      responses:
        '200':
          description: Returns internal work tickets and page results
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PoolOfOrdersDtoPagedResultData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/{workTicketId}/production-detail":
    get:
      tags:
      - WorkTickets
      summary: Returns work ticket's details
      operationId: GetWorkTicketProductionDetailAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: workTicketId
        in: path
        description: Work ticket id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returns work ticket's details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkTicketProductionDetailsDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/{workTicketId}/instruction":
    get:
      tags:
      - WorkTickets
      summary: Returns work ticket's details
      operationId: GetWorkTicketInstructionAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: workTicketId
        in: path
        description: Work ticket id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returns work ticket's details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WorkTicketInstructionDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
  "/proxia/mes/terminal-service/interface/v1/workplaces/{workplaceId}/WorkTickets/{workTicketId}/workplan":
    get:
      tags:
      - WorkTickets
      summary: Returns work ticket's work plan
      operationId: GetWorkTicketWorkPlanAsync
      parameters:
      - name: workplaceId
        in: path
        description: Work place id
        required: true
        schema:
          type: string
      - name: workTicketId
        in: path
        description: Work ticket id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returns work ticket's work plan
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/WorkPlanItemDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResultDto"
components:
  schemas:
    AuthenticationType:
      enum:
      - None
      - Pin
      - Badge
      type: string
      description: Types of user's authentication
    ConfigurationQuantityRevisionDto:
      type: object
      properties:
        enableScrap:
          type: boolean
          description: Enables scrap quantities
        enableRework:
          type: boolean
          description: Enables rework quantities
      additionalProperties: false
      description: Settings for quantity revision
    ConfigurationTerminalDto:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: ID of terminal configuration setting
        language:
          type: string
          description: Default language.
          nullable: true
        mainMenuItems:
          type: array
          items:
            "$ref": "#/components/schemas/FunctionItemDto"
          description: Items of main menu
          nullable: true
        quantityRevision:
          "$ref": "#/components/schemas/ConfigurationQuantityRevisionDto"
        users:
          "$ref": "#/components/schemas/ConfigurationUsersDto"
        workplaces:
          "$ref": "#/components/schemas/ConfigurationWorkplacesDto"
        workTicketDetails:
          "$ref": "#/components/schemas/ConfigurationWorkTicketDetailsDto"
      additionalProperties: false
      description: Terminal configuration
    ConfigurationUsersDto:
      type: object
      properties:
        showUsersForShift:
          type: boolean
          description: "Determines if a list of users which are relevant for the current
            and the next shift can be displayed\r\nDefault value: false"
        enableMultiSelect:
          type: boolean
          description: "Enables selection of multiple users.\r\nDefault value: false"
        loginAuthenticationType:
          "$ref": "#/components/schemas/AuthenticationType"
      additionalProperties: false
      description: Settings for user specific functions
    ConfigurationWorkplacesDto:
      required:
      - workplaceIds
      type: object
      properties:
        workplaceIds:
          type: array
          items:
            type: string
          description: ID of workplaces from terminal configuration
        enableAutomaticLayout:
          type: boolean
          description: "Enables automatic layout of tiles with work places\r\nDefault
            value: true"
        tileSize:
          "$ref": "#/components/schemas/TileSizes"
        tileRowCount:
          type: integer
          description: "Determines how many rows should be used to show work place
            tiles.\r\nThis property is not used if automatic layout is enabled\r\nDefault
            value: null"
          format: int32
          nullable: true
      additionalProperties: false
      description: Settings for work places
    ConfigurationWorkTicketDetailsDto:
      type: object
      properties:
        showInstructions:
          type: boolean
          description: Determines if instructions should be shown
      additionalProperties: false
      description: Settings for work ticket's details
    FunctionItemDto:
      required:
      - displayName
      - url
      type: object
      properties:
        displayName:
          type: string
          description: "User friendly name of an operation\r\nwhich will be executed
            with this menu item."
        url:
          type: string
          description: Url of an operation to be executed for this menu item.
      additionalProperties: false
      description: Menu item which executes an operation
    NewStatusDto:
      required:
      - statusId
      type: object
      properties:
        statusId:
          maxLength: 50
          type: string
          description: ID of the new status
        comment:
          maxLength: 2000
          type: string
          description: Comment
          nullable: true
      additionalProperties: false
      description: Details of new status
    PoolOfOrdersDto:
      required:
      - type
      - workTicketId
      type: object
      properties:
        workTicketId:
          maxLength: 50
          type: string
          description: Work ticket's Id
        type:
          "$ref": "#/components/schemas/PoolOfOrdersType"
        columns:
          type: array
          items:
            "$ref": "#/components/schemas/TableColumnDataDto"
          description: Columns in the work ticket list
          nullable: true
        color:
          "$ref": "#/components/schemas/RgbColorDto"
        canBeProcessed:
          type: boolean
          description: "Determines if the work ticket can be processed, eg.\r\nit
            it can be logged or a reply is allowed"
      additionalProperties: false
      description: "Pool of orders shows details of work ticket\r\nwith dynamic definition
        of table columns."
    PoolOfOrdersDtoPagedResultData:
      type: object
      properties:
        startRow:
          type: integer
          description: "Number of first page to be shown.\r\nDefault value: 1"
          format: int32
        rowCount:
          type: integer
          description: Number of rows to return
          format: int32
          readOnly: true
        totalRowCount:
          type: integer
          description: Total number of items
          format: int32
        items:
          type: array
          items:
            "$ref": "#/components/schemas/PoolOfOrdersDto"
          description: Items
          nullable: true
      additionalProperties: false
      description: Contains details of a page and a page data
    PoolOfOrdersType:
      enum:
      - Pending
      - Logged
      - Manual
      - Internal
      type: string
      description: Specifies the type of pool of orders.
    ProductionPerformanceDto:
      type: object
      properties:
        plannedQuantityAmount:
          type: number
          description: Work ticket's planned quantity
          format: double
        currentGoodQuantityAmount:
          type: number
          description: Current work ticket's good quantity
          format: double
        currentScrapQuantities:
          type: array
          items:
            "$ref": "#/components/schemas/QuantityDetailsDto"
          description: Current work ticket's scrap quantities
          nullable: true
        currentReworkQuantities:
          type: array
          items:
            "$ref": "#/components/schemas/QuantityDetailsDto"
          description: work ticket's rework quantities
          nullable: true
        plannedSetupTime:
          type: number
          description: Planned setup time
          format: double
        plannedProcessTime:
          type: number
          description: Planned process (production) time
          format: double
        currentSetupTime:
          type: number
          description: Current (actual) setup time
          format: double
        currentProcessTime:
          type: number
          description: Current (actual) process (production) time
          format: double
        quantityUnit:
          type: string
          description: Unit of quantity items
          nullable: true
      additionalProperties: false
      description: Performance indicator data for production
    QuantityDetailsDto:
      required:
      - id
      type: object
      properties:
        id:
          maxLength: 50
          type: string
          description: ID of quantity
        displayName:
          maxLength: 50
          type: string
          description: Display name
          nullable: true
        amount:
          type: number
          description: Amount of quantity
          format: double
      additionalProperties: false
      description: Quantity details
    ResultDto:
      type: object
      properties:
        title:
          type: string
          description: Title shows general information
          nullable: true
        httpStatus:
          type: integer
          description: Http status code of the operation
          format: int32
        userMessage:
          type: string
          description: "User relevant message.\r\nIt might be a warning, an error
            etc.\r\n<remarks>It is supposed to be presented to the user.</remarks>"
          nullable: true
        developerMessage:
          type: string
          description: "Developer relevant message with technical details.\r\n<remarks>It
            should only be used for developing purposes</remarks>"
          nullable: true
        output:
          "$ref": "#/components/schemas/ResultOutputs"
        url:
          type: string
          description: Url of endpoint which handles this operation
          nullable: true
      additionalProperties: false
      description: "Details of result data for operations\r\nwhich did not cause any
        errors in the service"
    ResultOutputs:
      enum:
      - Success
      - Error
      - RequiresConfirmation
      type: string
      description: Types of result's output
    RevisionInputDataDto:
      required:
      - userId
      type: object
      properties:
        userId:
          maxLength: 50
          type: string
          description: Id of user
        quantities:
          type: array
          items:
            "$ref": "#/components/schemas/QuantityDetailsDto"
          description: Quantities to be booked
          nullable: true
        comment:
          maxLength: 2000
          type: string
          description: Reply comment
          nullable: true
      additionalProperties: false
      description: Input data to be used by reply logic
    RgbColorDto:
      type: object
      properties:
        alpha:
          type: integer
          description: Alpha component
          format: int32
        red:
          type: integer
          description: Red component
          format: int32
        green:
          type: integer
          description: Green component
          format: int32
        blue:
          type: integer
          description: Blue component
          format: int32
      additionalProperties: false
      description: RGB color definition
    SortOrders:
      enum:
      - Ascending
      - Descending
      - None
      type: string
      description: Order to be used when sorting data
    StatusItemDto:
      required:
      - color
      - displayName
      - statusId
      type: object
      properties:
        statusId:
          maxLength: 50
          type: string
          description: Status id
        displayName:
          maxLength: 255
          type: string
          description: Status display name
        color:
          "$ref": "#/components/schemas/RgbColorDto"
        requiresComment:
          type: boolean
          description: Determines if change to this status requires a comment
        subStatus:
          type: array
          items:
            "$ref": "#/components/schemas/StatusItemDto"
          description: "List of sub status of the current status.\r\nIt can be used
            to build hierarchical structure."
          nullable: true
      additionalProperties: false
      description: Details of status menu
    TableColumnDataDto:
      required:
      - columnId
      - dataType
      - headerText
      type: object
      properties:
        columnId:
          type: string
          description: "Unique ID of table column.\r\nIt is used e.g. to define by
            which column data\r\nis to be filtered or sorted in GUI"
        headerText:
          type: string
          description: Text in a column header
        value:
          type: string
          description: Value shown in a column
          nullable: true
        dataType:
          type: string
          description: Value's data type
        sortOrder:
          "$ref": "#/components/schemas/SortOrders"
        visible:
          type: boolean
          description: Determines if this column should be shown
      additionalProperties: false
      description: Place holder for table columns
    TileSizes:
      enum:
      - Large
      - Small
      type: string
      description: Sizes of tiles
    UserDto:
      required:
      - firstName
      - id
      - lastName
      type: object
      properties:
        id:
          type: string
          description: User id
        firstName:
          maxLength: 50
          type: string
          description: First name
        lastName:
          maxLength: 50
          type: string
          description: Last name
        personalNumber:
          maxLength: 50
          type: string
          description: 'Optional: personal number'
          nullable: true
        badgeId:
          maxLength: 50
          type: string
          description: 'Optional: id of a user''s badge (card)'
          nullable: true
      additionalProperties: false
      description: Details of user data
    UserDtoPagedResultData:
      type: object
      properties:
        startRow:
          type: integer
          description: "Number of first page to be shown.\r\nDefault value: 1"
          format: int32
        rowCount:
          type: integer
          description: Number of rows to return
          format: int32
          readOnly: true
        totalRowCount:
          type: integer
          description: Total number of items
          format: int32
        items:
          type: array
          items:
            "$ref": "#/components/schemas/UserDto"
          description: Items
          nullable: true
      additionalProperties: false
      description: Contains details of a page and a page data
    UserLoginDto:
      required:
      - authentication
      - userId
      type: object
      properties:
        userId:
          type: string
          description: ID of user.
        authentication:
          "$ref": "#/components/schemas/AuthenticationType"
        loginValue:
          type: string
          description: "Value to be used by login operation.\r\nValue depends on a
            login type, it could be pin or badge id"
          nullable: true
      additionalProperties: false
    UserLogoutDto:
      required:
      - userId
      type: object
      properties:
        userId:
          maxLength: 50
          type: string
          description: User id
      additionalProperties: false
    UserShiftDto:
      required:
      - firstName
      - id
      - lastName
      - shiftIndex
      type: object
      properties:
        id:
          type: string
          description: User id
        firstName:
          maxLength: 50
          type: string
          description: First name
        lastName:
          maxLength: 50
          type: string
          description: Last name
        personalNumber:
          maxLength: 50
          type: string
          description: 'Optional: personal number'
          nullable: true
        badgeId:
          maxLength: 50
          type: string
          description: 'Optional: id of a user''s badge (card)'
          nullable: true
        shiftIndex:
          maximum: 2147483647
          minimum: 0
          type: integer
          description: "Index of the shift.\r\n0 is current shift, 1 is next shift
            etc."
          format: int32
      additionalProperties: false
      description: Details of user data with shift information
    UserShiftDtoPagedResultData:
      type: object
      properties:
        startRow:
          type: integer
          description: "Number of first page to be shown.\r\nDefault value: 1"
          format: int32
        rowCount:
          type: integer
          description: Number of rows to return
          format: int32
          readOnly: true
        totalRowCount:
          type: integer
          description: Total number of items
          format: int32
        items:
          type: array
          items:
            "$ref": "#/components/schemas/UserShiftDto"
          description: Items
          nullable: true
      additionalProperties: false
      description: Contains details of a page and a page data
    WorkplaceDataDto:
      required:
      - displayName
      - id
      type: object
      properties:
        id:
          maxLength: 50
          type: string
          description: Work place Id
        displayName:
          maxLength: 255
          type: string
          description: Work place display name
        loggedInUsers:
          type: array
          items:
            "$ref": "#/components/schemas/UserDto"
          description: Users logged on the work place
          nullable: true
        firstLoggedOnWorkTickets:
          type: array
          items:
            "$ref": "#/components/schemas/WorkTicketDto"
          description: "First n work tickets which are logged on the work place.\r\nData
            is sorted by planned start time."
          nullable: true
        loggedOnWorkTicketCount:
          type: integer
          description: Number of work tickets which are logged on the work place
          format: int32
        firstPendingWorkTickets:
          type: array
          items:
            "$ref": "#/components/schemas/WorkTicketDto"
          description: "First n Work tickets which are assigned and not logged on
            the work place.\r\nData is sorted by planned start time."
          nullable: true
        pendingWorkTicketCount:
          type: integer
          description: Number of work tickets which are assigned and not logged on
            the work place
          format: int32
        statusId:
          maxLength: 50
          type: string
          description: Id of current work place's status
          nullable: true
        statusDisplayName:
          maxLength: 255
          type: string
          description: Display name of current work place's status
          nullable: true
        statusItems:
          type: array
          items:
            "$ref": "#/components/schemas/StatusItemDto"
          description: Status items in status menu
          nullable: true
      additionalProperties: false
      description: Work places overview data
    WorkplaceDataDtoIEnumerator:
      type: object
      properties:
        current:
          nullable: true
          readOnly: true
      additionalProperties: false
    WorkPlanItemDto:
      required:
      - position
      - workPlaceDisplayName
      - workTicketId
      - workTicketNumber
      - workTicketStatus
      type: object
      properties:
        position:
          type: integer
          description: Work ticket's position index
          format: int32
        workTicketId:
          maxLength: 50
          type: string
          description: ID of the current work ticket
        previousWorkTicketIds:
          type: array
          items:
            type: string
          description: IDs of the direct predecessor work tickets
          nullable: true
        nextWorkTicketIds:
          type: array
          items:
            type: string
          description: IDs of the direct successor work tickets
          nullable: true
        workTicketNumber:
          maxLength: 50
          type: string
          description: Work ticket's number
        workTicketDisplayName:
          maxLength: 50
          type: string
          description: Work ticket's display name
          nullable: true
        workTicketStatus:
          maxLength: 255
          type: string
          description: Work ticket's display name
        workPlaceDisplayName:
          maxLength: 255
          type: string
          description: "Display name of the workplace.\r\nMultiple workplaces are
            separated with '|'."
        plannedQuantity:
          type: number
          description: Planned quantity
          format: double
        producedQuantity:
          type: number
          description: Produced quantity
          format: double
        plannedBeginTimeUtc:
          type: string
          description: Planned begin time as UTC
          format: date-time
          nullable: true
        plannedEndTimeUtc:
          type: string
          description: Planned end time as UTC
          format: date-time
          nullable: true
        plannedDurationInMinutes:
          type: number
          description: Planned duration of production in minutes
          format: double
        actualBeginTimeUtc:
          type: string
          description: Actual begin time as UTC
          format: date-time
          nullable: true
        actualEndTimeUtc:
          type: string
          description: Actual end time as UTC
          format: date-time
          nullable: true
        actualDurationInMinutes:
          type: number
          description: Actual duration of production in minutes
          format: double
      additionalProperties: false
      description: Work ticket's work plan
    WorkTicketDto:
      required:
      - description
      - id
      type: object
      properties:
        id:
          maxLength: 50
          type: string
          description: Work ticket's Id
        description:
          maxLength: 255
          type: string
          description: Work ticket's display name
        plannedBeginTs:
          type: string
          description: Planned begin time in UTC
          format: date-time
          nullable: true
      additionalProperties: false
      description: Work ticket's data used in machine overview
    WorkTicketInstructionDto:
      type: object
      properties:
        documentPaths:
          type: array
          items:
            "$ref": "#/components/schemas/FunctionItemDto"
          description: Document paths
          nullable: true
        productionNotes:
          type: string
          description: Notes for production process
          nullable: true
        setupNotes:
          type: string
          description: Notes for setup process
          nullable: true
      additionalProperties: false
      description: Work ticket's instructions
    WorkTicketMultiLogonDto:
      required:
      - userId
      - workTicketIds
      type: object
      properties:
        userId:
          maxLength: 50
          type: string
          description: Id of user
        workTicketIds:
          type: array
          items:
            type: string
          description: Work tickets which should be logged on
      additionalProperties: false
    WorkTicketProductionDetailsDto:
      required:
      - workTicketStatus
      type: object
      properties:
        workTicketDisplayName:
          maxLength: 50
          type: string
          description: Display name of the work ticket
          nullable: true
        workTicketNumber:
          maxLength: 50
          type: string
          description: Number of the work ticket
          nullable: true
        workTicketStatus:
          maxLength: 50
          type: string
          description: Display name of work ticket's current status
        activityDescription:
          maxLength: 50
          type: string
          description: Description of work ticket's activity
          nullable: true
        articleDescription:
          maxLength: 50
          type: string
          description: Description of produced article
          nullable: true
        order:
          maxLength: 50
          type: string
          description: Display name of the customer's order
          nullable: true
        storageLocations:
          type: array
          items:
            type: string
          description: Display name of storage locations
          nullable: true
        notes:
          maxLength: 2000
          type: string
          description: Text notes of the work ticket
          nullable: true
        performanceData:
          "$ref": "#/components/schemas/ProductionPerformanceDto"
        plannedBeginTimeUtc:
          type: string
          description: Planned begin time as UTC
          format: date-time
          nullable: true
        plannedEndTimeUtc:
          type: string
          description: Planned end time as UTC
          format: date-time
          nullable: true
        functionItems:
          type: array
          items:
            "$ref": "#/components/schemas/FunctionItemDto"
          description: Data for function buttons
          nullable: true
        actualBeginTimeUtc:
          type: string
          description: Actual begin time
          format: date-time
          nullable: true
      additionalProperties: false
      description: Work ticket details' general information
    WorkTicketSearchType:
      enum:
      - ByContext
      - None
      type: string
      description: Search types characterize different search patterns
    WorkTicketSingleLogoffDto:
      required:
      - isCompleted
      - userId
      type: object
      properties:
        userId:
          maxLength: 50
          type: string
          description: Id of user
        quantities:
          type: array
          items:
            "$ref": "#/components/schemas/QuantityDetailsDto"
          description: Quantities to be booked
          nullable: true
        comment:
          maxLength: 2000
          type: string
          description: Reply comment
          nullable: true
        isCompleted:
          type: boolean
          description: "Specifies if work ticket is being logged off\r\nas completed
            or partly completed"
          default: false
      additionalProperties: false
    WorkTicketUserDto:
      required:
      - userId
      type: object
      properties:
        userId:
          maxLength: 50
          type: string
          description: Id of user
      additionalProperties: false
      description: User and user role details
